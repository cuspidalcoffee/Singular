///////////////////////////////////////////////////////////////////////////////
version="$Id: frontalsurf.lib  2022-25-06 $";
category="Singularity Theory, Algebraic Geometry";
info="
LIBRARY: frontals.lib         Compute topological invariants of corank 1
                              frontal hypersurfaces
                              
AUTHORS: C. Munoz-Cabello,    chmuca@alumni.uv.es

PROCEDURES:
    fcodim(f);             frontal codimension of a plane curve
    fmilnor(f);            frontal Milnor number
    gernotmal(f);          compute the normal line
    invariants(f);         compute stable frontal zero-schemes
    IsFrontal(f);          check if input is frontal
    qi(f);				   compute QI
    wfinvariants(g, y);    compute geometric invariants of the discriminant

REFERENCES:
    [Ish] Ishikawa, G. (2020) Recognition problem of frontal singularities
    [MMR] Marar, W.L., Montaldi, J.A. and Ruas, M.A.S. (1999) Multiplicities of
        zero-schemes in quasihomogeneous corank-1 singularities
    [NB]  Nuno-Ballesteros, J.J. (2015) Unfolding plane curves with cusps and
        nodes
    [GSP] https://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process
        (Accessed: 2022-06-25)
";

LIB "general.lib";       // product
LIB "presmatrix.lib";    // presmatrix
LIB "ring.lib";          // ord_test
LIB "sing.lib";          // milnor

//-----------------------------------------------------------------------------
proc frontalise(poly p, q, y)
{
    // we assume diff(p, y) divides diff(q, y)
    if (vardeg(p, y) > vardeg(q, y)) { return frontalise(q, p, y); }

    // construct u such that diff(q, y) = mu * deg(p, y)
    int degu = vardeg(q, y) - vardeg(p, y);

    ring src = basering;
    ring aux = char(basering), X(1..degu + 1), ds;
    def extsrc = src + aux;

    poly py = imap (src, diff(p, y));
    poly qy = imap (src, diff(q, y));
    poly u = X[degu + 1];

    /* The formula above for qx is tied to two constraints:
    /* - px can only go as high as degp
    /* - u can only go as high as degu + 1 */

    // coeffs(qy,y)
    // coeffs(py,y)

    // we get the equations we need to remove by 
    poly k = qy - mu * py;

    "// auxiliary variables:";
    "//   X[1] .. X[" + string(degmu) "]";
    "// frontalisation equations:";
    "//   " + string(subst(k, y, 0)) + " = 0");
 
    for (i = degqy; i => 0; i--)
    {
         k = diff(k, y);
         "//   " + string(subst(k, y, 0)) + "= 0";
    }
}

//-----------------------------------------------------------------------------
proc invariants(map f)
{
    // store name of basering to use presmatrix
    string br_name = nameof(basering);

    // checking for exceptions
    baseringlocal();
    checkvars(2);
    
    option(noredefine);
    list prenormalf = prenormal(f);

    // computations related to the double point scheme
    int @S, @K, @W, @muC, @muD = DPSpace(prenormalf[2..4]);

    // computations related to target triple point space
    // (export to use presmatrix)
    map @f = preimage(f), prenormalf[1..3];
    ideal @I = 0;
    export(@f, @I);

    presmatrix(@f, @I);
    setring RTPr;
    int @T = vdim(std(fitting(PM, 2))) - @S - @K;

    // frontal marar-mond equations and frontal milnor number
    execute("setring " + string(br_name));
    int @mufC = 2 * @S + @muC;
    number @mufD = @K + @T + 1/2 * (@muD + 1 - @W - @S);
    number @muf = 1/2 * (@muD - 1 + @S + @W) - @K - 2 * @T;

    export(@S, @K, @T, @W, @muC, @mufC, @muD, @mufD, @muf);

    "";
    "// Isolated frontal singularities:";
    "//   Swallowtails:               @S = " + string(@S);
    "//   Cusp-folds:                 @K = " + string(@K);
    "//   Triple points:              @T = " + string(@T);
    "//   Folded Whitney umbrellas:   @W = " + string(@W);
    "";
    "// Branch of cuspidal edges:";
    "//   @cuspedge = " + string(@cuspedge);
    "//   Milnor number (source):     @muC = " + string(@muC);
    "//                 (target):    @mufC = " + string(@mufC);
    "";
    "// Branch of transversal double points:";
    "//   @dpoints = " + string(@dpoints);
    "//   Milnor number (source):     @muD = " + string(@muD);
    "//                 (target):    @mufD = " + string(@mufD);
    "";
    "// Frontal Milnor number:        @muf = " + string(@muf);
    "";
    "// Access these variables from global scope by typing their varnames!";
}

//-----------------------------------------------------------------------------
proc IsFrontal(map f, list #)
{
    /* Arguments for `#`:
    /* (no argument): throw an exception if the map is not frontal
    /* r:             report whether the map is frontal                      */

    ideal jf = minor(ideal(jacob(f)), nvars(basering));    // see [2]

    if (nvars(preimage(f)) != nvars(basering) + 1)
    { ERROR(nameof(f) + " not a parametric hypersurface"); }

    if (#[1] == "r")
    {
        if (size(std(jf)) > 1) {return(0);}    // not frontal
        return(1);                             // frontal
    }

    if (size(std(jf)) > 1) { ERROR("not a frontal map"); }
}

//-----------------------------------------------------------------------------
proc Qi (map f)
{
    IsFrontal(f);

 
    for (i=1; i <= nvars(basering); i++)
    {
        if (var(i) != t)
        { I = I, diff(f[2], var(i)) - diff(f[1], var(i)) * mu; }
    }

    return reduce(I,f);
}

//-----------------------------------------------------------------------------
proc wfinvariants(poly g, poly z)
{
    int leadvar, prod, @S, @K, @T;
    intvec w;

    baseringlocal();
    checkvars(3);
    option(noredefine);

    w = wdeg(g);            // find the weights and weighted degree of g
    leadvar = rvar(z);      // find which variable was declared

    if(rvar(z) == 0) { ERROR("variable not in base ring"); }

    // product from the formula
    prod = w[4] div w[leadvar] * (1, 1, 1) - (1, 2, 3);

    /* Singular does not like to use the `/` sign for integer division, so we
    /* need to use `div` instead.                                            */

    // formula from [MMR]

    @S = w[leadvar]^3 * product(prod) div product(w, 1..3);
    @K = @S * (w[4] - 4 * w[leadvar]) div w[leadvar];
    @T = @K * (w[4] - 5 * w[leadvar]) div (6 * w[leadvar]);

    export(@S, @K, @T);

    "";
    "// Swallowtails:               @S = " + string(@S);
    "// Cusp-folds:                 @K = " + string(@K);
    "// Triple points:              @T = " + string(@T);
    "";
    "// Access these variables from global scope by typing their varnames!";
}

//////////////////////  STATIC PROCEDURES  ////////////////////////////////////

//-----------------------------------------------------------------------------
static proc baseringlocal()
{
    // Output: none

    option(noredefine);

    if (ord_test(basering) != -1)
    {
        "// please use local order (ds) for " + nameof(basering);
        ERROR("no local order ring");
    }
}

//-----------------------------------------------------------------------------
static proc corank (map f)
{
    // Output: int (corank of f at 0)

    matrix jf = jacob(ideal(f));

    for (int i = 1; i <= nvars(basering); i++) { jf = subst(jf, var(i), 0); }

    return (nvars(basering) - rank(jf));
}

//-----------------------------------------------------------------------------
static proc checkvars(int n)
{
    // Output: none
    
    option(noredefine);

    if (nvars(basering) != n)
    {
        ERROR(nameof(basering) + " must have " + string(n) + " variables");
    }
}

//-----------------------------------------------------------------------------
static proc prenormal (map f)
{
   /* Given a corank 1 frontal f(x, y)=(x, p(x, y), q(x, y)), we shall say that
   /* f is in prenormal form if diff(p, y) divides diff(q, y).
   /* This procedure sets f to prenormal form.
   /*
   /* Output: ideal formed by p, q, y                                        */

    IsFrontal(f, "w");
    if (corank (f) != 1) { ERROR(nameof(f) + " does not have corank 1"); }

    // the output will be given as `map @f = preimage(f), @X, p, q`
        
    intvec ypos = 1..nvars(basering);
    intvec pqpos = 1..size(ideal(f));

    /* If f has corank 1, size(ypos) will be reduced to 1 by the end of the
    /* double loop, and size(pqpos) will be reduced to 2.                    */

    for (int i = 1; i <= nvars(basering); i++)
    {
    	for (int j = 1; j <= size(ideal(f)); j++)
    	{
            if (var(i) == f[j])
            {
                /* this can be further optimised so ypos and pqpos reduce the
                /* number of wasted iterations!                              */
                
                delete(ypos, i);
                delete(pqpos, j);
                
                continue;          // exit the j-loop
            }
    	}
    }

    poly p, q = f [pqpos];
    poly @y = ypos[1];

    // diff(q, y) modulo diff(p, y)
    poly QyModPy = reduce(vardeg(q, @y), vardeg(p, @y));

  	if (QyModPy == 0) { return (p, q, @y); }
   	else { return (q, p, @y); }
}

//-----------------------------------------------------------------------------
static proc DPSpace(poly p, poly q, poly y)
{
    // Output: intvec of size five

    // add an auxiliar variable for divided differences
    ring aux = ringlist(src)[1], @z, ds;
    def divdifring = src + aux;
    setring divdifring;

    poly p = imap(src, p);
    poly q = imap(src, q);
    poly y = imap(src, y);

    "// Computing double point scheme...";

    // compute the double point scheme via divided differences
    poly P = (p - subst(p, y, @z)) / (y - @z);
    poly Q = (q - subst(q, y, @z)) / (y - @z);
    poly py = diff(p, y);
    poly tau = resultant(P, Q, @z) / py^2;

    poly alpha = reduce(P, py) / (y - @z);
    poly beta = reduce(Q, py) / (y - @z);
    int PAA = vdim(std(py, alpha, beta));

    setring src;
    poly @cuspedge = imap(divdifring, py);
    int P3 = vdim(std(@cuspedge, diff(@cuspedge, y)));

    poly @dpoints = imap(divdifring, tau);
    int PT = vdim(std(@cuspedge, @dpoints));

    export(@cuspedge, @dpoints);

     // S, K, W, mu(C,0), mu(D,0)
    return(P3, PAA - 2 * P3, PT - PAA, milnor(@cuspedge), milnor(@dpoints));
}

//-----------------------------------------------------------------------------
static proc vardeg(poly f, y)
{
    // degree of a polynomial with respect to a given variable

    for (int i=1; i <= nvars(basering); i++)
     { if (var(i) != y) { f = subst (f, var(i), 0); } }

    return deg(f);
}

//-----------------------------------------------------------------------------
static proc wdeg(poly g)
{
    intvec w = qhweight(g);

    if (w == 0)
    { ERROR(nameof(g) + " not weighted homogeneous!"); }

    // make g homogeneous
    for (int i = 1; i <= size(w); i++)
    { g = subst(g, var(i), var(i)^w[i]); }

    return(w, deg(g));
}

///////////////////////////////////////////////////////////////////////////////
