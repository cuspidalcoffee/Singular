LIB "frontals.lib";
example wfinvariants;
quit;
LIB "frontals.lib";
example wfinvariants;
quit;
LIB "frontals.lib";
example wfinvariants;
quit;
help eliminate;
help tjurina;
help interpolation;
quit;
LIB "frontals.lib";
example curve_codim;
LIB "frontals.lib";
example curve_codim;
LIB "frontals.lib";
example curve_codim;
LIB "frontals.lib";
example curve_codim;
LIB "frontals.lib";
example curve_codim;
LIB "frontals.lib";
example curve_codim;
ring r=0,t,ds;
ideal i=t3,t5;
tjurina(i);
milt(i);
mult(i);
i=std(i);
tjurina(i);
mult(i);
milnor(i);
tjurina(i)-mult(i);
i;
ring r=0,(x,y),ds;
poly p=x3+y5;
tjurina(p);
milnor(p);
mult(p);
p = std(p);
tjurina(p)-mult(p);
tjurina(p)-mult(p)-milnor(p) div 2;
tjurina(p)-mult(p)-milnor(p) div 2 + 1;
type(p);
typeof(p);
typeof(p) == "poly";
ordstr(r);
ring s=0,(x,y),ordstr(r);
i;
ideal i=x2,y4;
ring s=0,(x,y),ds;
setring r;
map ii=s,i;
ii;
length(i);
size(i);
LIB "frontals.lib";
example curve_codim;
LIB "frontals.lib";
example curve_codim;
LIB "frontals.lib";
example curve_codim;
LIB "frontals.lib";
example curve_codim;
LIB "frontals.lib";
example curve_codim;
LIB "frontals.lib";
example curve_codim;
LIB "frontals.lib";
example curve_codim;
LIB "frontals.lib";
example curve_codim;
LIB "frontals.lib";
example curve_codim;
LIB "frontals.lib";
example curve_codim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
example curve_codim;
LIB "frontals.lib";
example curve_codim;
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
ring r=0,(u,x,y),ds;
ideal i=u,x,y3+3x2y+3uy,y4+2x2y2+2uy2;
fcodim(i,1);
LIB "frontals.lib";
example fcodim;
basering;
vars(1..2);
var(1..2);
vars(1..2);
? vars;
varstr(1..2);
string k;
k;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
LIB "frontals.lib";
example fcodim;
fcodim
;
basering;
ideal i=u,x,y2,x2y3+uy3;
i=std(i);
ring R=0,(X,Y,Z,T);
ring R=0,(X,Y,Z,T),ds;
setring r;
map f=R,i;
ideal z=0;
preimage(r,f,z);
setring R;
preimage(r,f,z);
ring r=0,(x,a,b),ds;
ideal i=a*x + x^3, -5*a^2*x + 6*a*b*x^2 + 9*b*x^4 + 9*x^5,a,b;
fcodim(i);
fcodim(i,2);
ring R=0,(X,Y,a,b),ds;                          /* Anillo de llegada */
ring r=0,(x,a,b),ds;                              /* Anillo de partida */
map f=R,a*x + x^3, -5*a^2*x + 6*a*b*x^2 + 9*b*x^4 + 9*x^5,a,b;             /* Definimos la aplicacion */
ideal Z=0;                                           /* Ideal cero para calcular la imagen */
setring R;
ideal Im=preimage(r,f,Z);                    /* Calculamos el ideal de la imagen */
poly g=Im[1];                                      /* Ecuacion implicita de la imagen */
ideal j=jacob(g);                                 /* Ideal Jacobiano */
ideal i=j,g;	                                          /* Ideal Jacobiano mC!s la imagen */
ideal jr=j[1..2];                                    /* Jacobiano relativo */
ideal ir=jr,g;                                        /* Jacobiano relativo mas la imagen */
module m=modulo(i,ir);                      /* Modulo cociente de los dos ideales */
module m0=subst(m,a,0,b,0);            /* Parametros igual a cero */
ring R0=0,(X,Y),ds;                            /* Anillo de llegada sin parametros */
module m0=imap(R,m0);                   /* Importamos el modulo */
vdim(std(m0));             
//why doesnt it work???
;
LIB "frontals.lib";
ring r=0,(u,x,y),ds;
ring r=0,(x,y,u),ds;
ideal i=u,x,y2,x2y3+uy3;
fcodim(i,1);
quit;
