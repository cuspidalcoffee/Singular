///////////////////////////////////////////////////////////////////////////////
version="$Id: presmatrix.lib  2013-12-03 $";
category="Singularity Theory, Commutative Algebra";
info="
LIBRARY:  presmatrix.lib          Compute presentation matrix

AUTHORS:  Marcelo Escudeiro Hernandes,     mehernandes@uem.br
          Aldicio Jose Miranda,            aldicio@famat.ufu.br
          C. Munoz-Cabello,                chmuca@alumni.uv.es
          Guillermo Penafort-Sanchis,      guillermo.penafort@uv.es
  
PROCEDURES:
  presmatrix(Pullf, ISource);   compute presentation matrix
 
AUXILIARY PROCEDURES:
  Sols(nJ);          return solutions of linear system of parameters
  Row(rh,D,A,h);     compute rh^th line of the presentation matrix
  PolyGen(d);        create polynomial with coefs = 1 and degree d
 ";

 LIB "matrix.lib";
 LIB "rootsur.lib";
 LIB "ring.lib";
 LIB "homolog.lib";
 
//-------------------------------------------------------------------------------------------------
proc presmatrix(map Pullf, ideal ISource)
{
    option(noredefine);
 
    if (ord_test(basering) != -1) 
    {
        print("//No local order ring! Get generators using local order");
    }

	ring RS = basering;
	int l = nvars(RS);

	ring RT = preimage(Pullf);
 	int n = nvars(preimage(Pullf)) - 1;
 	int n2 = size(IPullf);

	setring RS;
    ideal IPullf = ideal(Pullf);

	if (n+1 != n2)
	{
		ERROR("Target dimension must be equal the number of entries of given map!");
	}

	execute("string Tvars=varstr("+RTName+")"); //name of vars in target 
	ideal IPullf1 = IPullf[1..n], ISource;      //ideal by first "(n-1)-entries of f" + "ideal I"
	ideal KB = kbase(std(IPullf1));
	int K = size(KB);

    if(K == 0)
    {
        ERROR("The number of generators must be greater than zero. Verify input!");
    } 

	matrix Gen[1][K];
	
 	for (int r = 1; r <= K; r++) { Gen[1, r] = KB[K - r + 1]; }
	
    ring RG = 0, G(1..K), ds;
    matrix M[K][K];
    matrix Pres = diag(Y, K);
    							
 	map Pf = RT, IPullf;
 	int done;					        //indicates row done
 	
	for(int r = 1; r <= K; r++)
 	{
    	int d=1;  
		done = 0;
 		while(!done)
 		{
 			setring RT;
 			matrix Pols = PolyGen(d);
 			int np = size(Pols[1, 1]) + (h - 1) * size(Pols[1, 2]) - 1;
 			poly D = Pols[1,1];
 			poly A = Pols[1,2];

			// add parameters to source and target
 			
			ring RTP1 = (0, a(1..np)), (X(1..n), Y), ds;
			poly D = fetch(RT, D);
			poly A = fetch(RT, A);
			list ML = Row(rh, D, A, h);
			matrix M = ML[1];
			list ParList = ML[2];
			map mM = RG, M;
		    ring RSP1 = (0, a(1..np)), x(1..l), dp;
			ideal IPf = fetch(RS, IPullf);
			map Pf = RTP1, IPullf;
			ideal I=std(fetch(RS,ISource)); 

			Gen = fetch(RS, Gen);
			
			poly p=(Pf(mM)[1])*Gen[1,1];
    			for(int c=2;c<=h;c++)
			{
				p=p+Pf(mM)[c]*Gen[1,c];
			}  //we multiply the row matrix M by column matrix Gen, getting the generic polynomial
			   //in the source. Next step is to reduce modulo ideal I.
      			p=reduce(p,I);
			
//--------------------------------------------------------------------------------------------------------------			
			ideal J; 
			poly u=1;
			for(int v=1;v<=l;v++)
			{
				u=x(v)*u;  //its need to use "coef" below
			}		
			matrix C=coef(p,u);
		      	J=ideal(submat(C,2,1..ncols( C)));
			int sj=size(J); int i=1; int k;
				ring RP=0,(a(1..np)),dp; //ring of parameters
				ideal J=imap(RSP1,J);
			       	list  L=Sols(J); 
				if(L[1]==0)
				{
				    d++;      //if the linear system of param. has no solution, then the degree increases
				}
				else      
				{
					done=1;  
					setring RT;          //go to target ring RT: (X[1],...X],Y)
					list    L=imap(RP,L);   
					list    ParList=imap(RTP1,ParList);
					int     szS=size(L[2]);
					int      pr;
					for(int i=1;i<=szS;i++)
					{
						pr=L[2][i][1];
						Pres[rh,ParList[pr][2]]=Pres[rh,ParList[pr][2]]+L[2][i][2]*ParList[pr][1];
					}//here just replace the parameters by respective solutions
				}
		    } //done while
    	}
	execute("ring RTPr = 0, ("+Tvars+"),ds");//ring to access the present. matrix
        matrix PM[h][h]=fetch(RT,Pres);
	print("");
	print("//     PM");
	print("//R^h------>R^h------>Ox------>0;  h = "+string(h)+", R = "+RTName);
	print("");
	print(PM); 
	exportto(Top,RTPr);
        exportto(Top,PM);
	print("");
    print("//To access the presentation matrix PM, type:  setring RTPr; PM; ");      
}
//---------------------------------------proc Sols return solutions of linear system of parameters-----------

proc Sols(ideal nJ)
{ 
  list L;
  nJ=std(nJ);
        if(reduce(1,nJ)==0)
	  {
	    L[1]=0;  L[2]=list();
	  }
	  else
	      {
	         L[1]=1;  L[2]=list();  poly LM, Su, Ji;number LC; int s=size(nJ); int  pos=1; int  i=1;
                 while(L[1]==1 && i<=s)
		   {	
			Ji=nJ[i];
			LC=leadcoef(Ji); 	
			if(LC!=0)
			  {	LM=leadmonom(Ji); 	
				Su=-Ji/LC+LM;	
				for(int j=i+1;j<=s;j++)
				  {
				     nJ[j]=subst(nJ[j],LM,Su); 	
				  }
			  }
		  	i++;
	              }
		for(int i=s;i>=1;i--)
		   {
		     Ji=nJ[i];
		      if(Ji!=0)
			{
			  LM=leadmonom(Ji);
			         while(univariate(Ji)==0)//entries here when we have for ex.: "7*a(4)+3*a(5)", no univariate.
				      {	LM=leadmonom(Ji);
					nJ=subst(nJ,LM,0);
					Ji=nJ[i]; 
				      }
				  LM=leadmonom(Ji);
				  Su=-Ji/leadcoef(Ji)+LM;
              			  L[2][pos]=list(univariate(Ji),Su);
 				  pos++;
				  nJ=subst(nJ,LM,Su);
			}
		   }
	      }
    
     return(L);
}
	     
	
//--------------------------------------------------------------------------------------------------
static proc Row(int rh, poly D, poly A, int h)
// rh = rh line; D = diagonal polin; A= no diagonal polin.; h = order of present. matrix;
{
	matrix M[1][h];
 	D = D - Y; 	 
  	int sD = size(D);
  	int sA = size(A); 
  	list ParList;

  	int c=1;

    for(int j=1;j<rh;j++) //before(or left) the diagonal 
        {   
	  for(int i=1;i<=sA;i++)
	    {                
		  M[1,j]=A[i]*par( c)+M[1,j];//par(m)=m^th param. of basering
		  ParList[c]=list(A[i],j);
		  c++;
   	    }
	} 

     for(int i=1;i<=sD;i++)   //in the diagonal
       {
  	 M[1,rh]=D[i]*par( c)+M[1,rh];
  	 ParList[c]=list(D[i],rh);
  	 c++;
       } 

     M[1,rh]=M[1,rh]+Y; //then the coef.of Y is "1"  

    for(int j=rh+1;j<=h;j++) //after (or right) the diagonal
      {
	 for(int i=1;i<=sA;i++)
	   {
	        M[1,j]=A[i]*par( c)+M[1,j];
	        ParList[c]=list(A[i],j);
	        c++;
	   }			
	   }
      }
  list L;
  L[1]=M;
  L[2]=ParList;
  return(L);
}

//------------------------Create polynomial with coefs = 1 and degree d---------------------------------
static proc PolyGen(int d)
{
	poly D = sparsepoly(0, d, 0, 1);
    poly PY;

	for (int i=1; i<=d; i++) { PY = PY + Y^i; }
	
    poly A = D - PY;					
    matrix Pols[1][2] = D, A;

    return(Pols);
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////
