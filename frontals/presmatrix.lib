///////////////////////////////////////////////////////////////////////////////
version="$Id: presmatrix.lib  2013-12-03 $";
category="Singularity Theory, Commutative Algebra";
info="
LIBRARY:  presmatrix.lib          Compute presentation matrix

AUTHORS:  Marcelo Escudeiro Hernandes,     mehernandes@uem.br
          Aldicio Jose Miranda,            aldicio@famat.ufu.br
          Guillermo Penafort-Sanchis,      guillermo.penafort@uv.es 
  
PROCEDURES:
  presmatrix(Pullf, ISource); compute presentation matrix
 
AUXILIARY PROCEDURES:
  Sols(nJ);          return solutions of linear system of parameters
  Row(rh,D,A,h);     compute rh^th line of the presentation matrix
  PolyGen(d);        create polynomial with coefs = 1 and degree d
 ";

 LIB "matrix.lib";
 LIB "rootsur.lib";
 LIB "ring.lib";
 LIB "homolog.lib";
 
//-------------------------------------------------------------------------------------------------
proc presmatrix(map Pullf, ideal ISource)
{
option(noredefine);
	ring RS = basering;					// source ring
	int tbegin=timer;
 
	int E=;
	if (ord_test(RS) != -1) 
		{ print("// No local order ring! Get generators using local order"); }
  
	ideal IPullf = ideal(Pullf);
	setring RS;
	ring RT = preimage(Pullf);			// target ring 
	int l = nvars(basering);			// number of vars in source
	int n = nvars(RT) - 1;
	int nn = size(IPullf);
	
	if (n+1 != nn)
	{
		ERROR("Target dimension must be equal the number of entries of given map!");
	}

	string Tvars = varstr(RT); 				// name of vars in target 
	ideal IPullf1 = IPullf[1..n], ISource;	// ideal by first n-1 entries of f and I
	ideal KB = kbase(std(IPullf1));			// generators 
	int K = size(KB);
	
	if(K == 0)
	{
    	ERROR("The number of generators must be greater than zero. Verify input!");
	}

	matrix  Gen[1][K];                           // matrix of generators
 
 	for(int r1 = 1; r1 <= K; r1++)
		{ Gen[1,r1] = KB[K-r1+1]; }              // change the order of the generators

 	"//Generators = " + string(Gen);

	ring RG = 0, G(1..K), ds;		 			//auxiliar ring
	ring RT = 0, (X(1..n), Y), ds;	 			//auxiliar target ring
	matrix M[K][K];							   	//auxiliar matrix
 	matrix Pres = diag(Y, K);	        	 	//presentation matrix
 			                        
 	ring RS = 0, (x(1..l)), ds;	                //internal auxiliary ring source
	ideal IPf = fetch(RS, IPullf);   		  	//mapping "Pullf" to RS
 	ideal I = fetch(RS, ISource);      			//mapping "I" to RS
 							
	map Pf = RT, IPf;					        //print("Pullf IN RT->RS:Pf="+string(Pf));//

	int done;							        //indicates row done

	for(int rK = 1; rK <= K; rK++)
 	{
		int d = 1;  
		done = 0;
 		while(done == 0)
 		{
 			setring RT;
 			poly D, A = PolyGen(d);						//see proc PolyGen below
 			int np = size(D) + (h - 1) * size(A) - 1;	//number of parameters
 			
			ring RTP1 = (0, a(1..np)), (X(1..n), Y),ds;	//target ring with parameters
			poly D = fetch(RT, D);
			poly A = fetch(RT, A);
			
			list ML = Row(rK, D, A, K);					//see proc Row below
			matrix M = ML[1];
			list ParList = ML[2];
			map mM = RG, M;                             //mM[i] = M[1,i], i = no. generators
			
			ring RSP1 = (0, a(1..np)), x(1..l), dp;		//source ring with the same parameters
			ideal IPf = fetch(RS, IPf);
	    	map Pf = RTP1, IPf;

			ideal I = std(fetch(RS, I)); 
	        matrix Gen = fetch(RS, Gen);

			/* Now all objects are in RSP1 */

			poly p = (Pf(mM)[1]) * Gen[1,1];

			/* Multiply row matrix M by column matrix Gen, getting the generic
			 * polynomial in the source. */

    		for(int c = 2; c <= K; c++)
				{ p = p + Pf(mM)[c] * Gen[1,c]; }  
      		
			p = reduce(p, I);
			
//--------------------------------------------------------------------------------------------------------------			
			ideal J; 
			poly u = 1;
			for(int v = 1; v <= l; v++)
				{ u=x(v) * u; }  			//its need to use "coef" below

			matrix C = coef(p,u);
		    J = ideal(submat(C, 2, 1..ncols(C)));

			int sj, i = size(J), 1;
			int k;

			ring RP = 0, (a(1..np)), dp; //ring of parameters
			ideal J = imap(RSP1, J);
			list L = Sols(J);

			if(L[1]==0)
			{
				/* If the linear system of parameters has no solution,
			 	 * then the degree increases */
				d++;
			}    
			else      
			{
				done = 1;  
				
				setring RT;
				list L = imap(RP, L);   
				list ParList = imap(RTP1, ParList);
				int szS = size(L[2]);
				int pr;
				
				for(int i=1; i <= szS; i++)
				{
					/* Replace the parameters by their respective solutions */
					pr = L[2][i][1];
					Pres[rK, ParList[pr][2]] = Pres[rK, ParList[pr][2]] + L[2][i][2] * ParList[pr][1];
				}
			}
    	}
		
	execute("ring RTPr = 0, ("+Tvars+"),ds");//ring to access the present. matrix
    matrix PM[K][K] = fetch(RT, Pres);
	
	"";
	
	"//      PM";
	"// R^K------>R^K------>Ox------>0;  K = "+string(K)+", R = " + string(RT);
	
	"";

	print(PM); 
	exportto(Top, RTPr);
	exportto(Top PM);
	
	"";
    
	"// To access the presentation matrix PM, type:";
	"//     setring RTPr;";
	"//     PM;";      
}
//---------------------------------------proc Sols return solutions of linear system of parameters-----------

proc Sols(ideal nJ)
{ 
  list L;
  nJ=std(nJ);
        if(reduce(1,nJ)==0)
	  {
	    L[1]=0;  L[2]=list();
	  }
	  else
	      {
	         L[1]=1;  L[2]=list();  poly LM, Su, Ji;number LC; int s=size(nJ); int  pos=1; int  i=1;
                 while(L[1]==1 && i<=s)
		   {	
			Ji=nJ[i];
			LC=leadcoef(Ji); 	
			if(LC!=0)
			  {	LM=leadmonom(Ji); 	
				Su=-Ji/LC+LM;	
				for(int j=i+1;j<=s;j++)
				  {
				     nJ[j]=subst(nJ[j],LM,Su); 	
				  }
			  }
		  	i++;
	              }
		for(int i=s;i>=1;i--)
		   {
		     Ji=nJ[i];
		      if(Ji!=0)
			{
			  LM=leadmonom(Ji);
			         while(univariate(Ji)==0)//entries here when we have for ex.: "7*a(4)+3*a(5)", no univariate.
				      {	LM=leadmonom(Ji);
					nJ=subst(nJ,LM,0);
					Ji=nJ[i]; 
				      }
				  LM=leadmonom(Ji);
				  Su=-Ji/leadcoef(Ji)+LM;
              			  L[2][pos]=list(univariate(Ji),Su);
 				  pos++;
				  nJ=subst(nJ,LM,Su);
			}
		   }
	      }
    
     return(L);
}

//--------------------------------------------------------------------------------------------------
static proc Row(int rh, poly D, poly A, int h)
/* rh = rh line
 * D = diagonal polinomial
 * A = non diagonal polinomial
 * h = order of presentation matrix; */
{
	matrix M[1][h];
	D = D - Y;		// Y is a variable in RT

	list ParList;
	int c = 1;
    
	/* Before (or left to) the diagonal */

	for(int j = 1; j < rh; j++)
    {   
		for(int i = 1; i <= size(A); i++)
	    {                
			M[1, j] = A[i] * par(c) + M[1, j];
			ParList[c]=list(A[i],j);
			c++;
   	    }
	} 

	/* In the diagonal */

    for(int i = 1; i <= size(D); i++)
    {
  		M[1, rh] = D[i] * par(c) + M[1, rh];
  		ParList[c] = list(D[i], rh);
  		c++;
    } 

    M[1, rh] = M[1, rh] + Y;  

	/* After (or right to) the diagonal */

    for(int j = rh + 1; j <= h; j++)
    {
		for(int i=1; i<=size(A); i++)
		{
	        M[1, j] = A[i] * par(c) + M[1, j];
	        ParList[c] = list(A[i],j);
	        c++;
		}			
    }

	list L;
	L[1] = M;
	L[2] = ParList;
	return(L);
}

//------------------------ Create polynomial with coefs = 1 and degree d ---------------------------------

proc PolyGen(int d)
{ 
    poly D = sparsepoly(0, d, 0, 1);
    poly PY;
	
	for(int i = 1; i <= d; i++)
		{ PY = PY + Y^i; }						 
    
	poly A = D - PY;
    return(D, A);
}                                                                          
///////////////////////////////////////////////////////////////////////////////////////////////////////////

//---------------- using presmatrix procedure to get presentation matrix-------------------------

//f:X ----> R^n, I=I(X) is the ideal that define the variety X, (X in O_{l}), X=Cohen-Macaulay (n-1)-dimensional
//choose the projection such that the quotient: O_{l}/<f_1,...f_n-1, I> has finite dimension.

//STEPS:

//1.  LIB "presmatrix.lib";
//2.  define the target ring "R";
//3.  define the source ring "r";
//4.  define: map f = R, f_1,...,f_n; 
//5.  define the ideal "I" in the source "r";

//Example: f(x,y)= (xy, x^3+y^4); I=-3x^3+4y^4;

//ring R=0,(X,Y),ds;
//ring r=0,(x,y),ds;
//map f=R,xy,x^3+y^4;
//ideal I=-3x^3+4y^4;                                                                                                                                     
//presmatrix(f, I);

//--------output---------------

//Generators = 1,x,x2,y,y2,y3,y4

//     PM
//R^h------>R^h------>Ox------>0;  h = 7, R = R

//Y,     0,     0,    0,     0,     0,    -283/27,
//0,     Y,     0,    0,     0,     -283/27X,0,   
//0,     0,     Y,    0,     -283/27X2,0,    0,   
//0,     0,     -283/256X,Y,     0,     0,    0,   
//0,     -283/256X2,0,    0,     Y,     0,    0,   
//-283/256X3,0,     0,    0,     0,     Y,    0,   
//0,     0,     0,    -283/256X3,0,     0,    Y    

//To access the presentation matrix PM, type:  setring RTPr; PM; 